<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ai.rapids</groupId>
    <artifactId>cudf</artifactId>
    <version>0.8-SNAPSHOT</version>

    <name>cudfjni</name>
    <url>http://ai.rapids</url>


    <dependencies>
        <!-- https://mvnrepository.com/artifact/commons-logging/commons-logging -->
        <!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.9</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.4.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.7.9</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>2.25.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <ai.rapids.refcount.debug>false</ai.rapids.refcount.debug>
        <native.build.path>${basedir}/target/cmake-build</native.build.path>
        <skipNativeCopy>false</skipNativeCopy>
    </properties>

    <build>
        <resources>
            <resource>
                <directory>${basedir}/target/native-deps/</directory>
            </resource>
        </resources>
        <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
            <plugins>
                <plugin>
                    <groupId>org.codehaus.gmaven</groupId>
                    <artifactId>gmaven-plugin</artifactId>
                    <version>1.5</version>
                </plugin>
                <plugin>
                    <artifactId>maven-exec-plugin</artifactId>
                    <version>1.6.0</version>
                </plugin>
                <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>
                <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.22.0</version>
                    <dependencies>
                        <dependency>
                            <groupId>org.junit.platform</groupId>
                            <artifactId>junit-platform-surefire-provider</artifactId>
                            <version>1.2.0</version>
                        </dependency>
                        <dependency>
                            <groupId>org.junit.jupiter</groupId>
                            <artifactId>junit-jupiter-engine</artifactId>
                            <version>5.2.0</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>2.22.0</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>2.5.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
                <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.7.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>cmake</id>
                        <phase>validate</phase>
                        <configuration>
                            <tasks>
                                <mkdir dir="${native.build.path}"/>
                                <exec dir="${native.build.path}"
                                      failonerror="true"
                                      executable="cmake">
                                    <arg value="${basedir}/src/main/native"/>
                                    <arg value="-DCMAKE_CXX11_ABI=ON"/>
                                    <!--<arg value="-DUSE_NVTX"/>-->
                                </exec>
                                <exec dir="${native.build.path}"
                                      failonerror="true"
                                      executable="make">
                                    <arg value="-j"/>
                                </exec>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>setproperty</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                            def sout = new StringBuffer(), serr = new StringBuffer()
                            //This only works on linux
                            def proc = 'ldd ${native.build.path}/libcudfjni.so'.execute()
                            proc.consumeProcessOutput(sout, serr)
                            proc.waitForOrKill(10000)
                            def librp = ~/librmm\\.so\\s+=>\\s+(.*)librmm.*\\.so\\s+.*/
                            def m = librp.matcher(sout)
                            if (m.find()) {
                                pom.properties['native.deps.path'] = m.group(1)
                            } else {
                                fail("Could not find rmm as a dependency of libcudfjni out> $sout err> $serr")
                            }

                            def libcudf = ~/libcudf\\.so\\s+=>\\s+(.*)libcudf.*\\.so\\s+.*/
                            def cudfm = libcudf.matcher(sout)
                            if (cudfm.find()) {
                                pom.properties['native.cudf.path'] = cudfm.group(1)
                            } else {
                                fail("Could not find cudf as a dependency of libcudfjni out> $sout err> $serr")
                            }

                            def libcudart = ~/libcudart\\.so\\.(.*)\\s+=>.*/
                            def cm = libcudart.matcher(sout)
                            if (cm.find()) {
                                switch(cm.group(1)) {
                                    case ~/10\\.0.*/:
                                        pom.properties['cuda.classifier'] = 'cuda10'
                                        break
                                    default:
                                        pom.properties['cuda.classifier'] = ''
                                        break
                                }
                            } else {
                                fail("Could not find cudart as a dependency of libcudfjni out> $sout err> $serr")
                            }
                            </source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <!--Set by groovy script-->
                    <classifier>${cuda.classifier}</classifier>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>native-maven-plugin</artifactId>
                <version>1.0-alpha-8</version>
                <extensions>true</extensions>

                <configuration>
                    <javahClassNames>
                        <javahClassName>ai.rapids.cudf.Cuda</javahClassName>
                        <javahClassName>ai.rapids.cudf.Cudf</javahClassName>
                        <javahClassName>ai.rapids.cudf.CudfColumn</javahClassName>
                        <javahClassName>ai.rapids.cudf.CudfTable</javahClassName>
                        <javahClassName>ai.rapids.cudf.Rmm</javahClassName>
                    </javahClassNames>
                    <javahOutputDirectory>${basedir}/../cpp/jni/include/</javahOutputDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <redirectTestOutputToFile>true</redirectTestOutputToFile>
                    <systemPropertyVariables>
                        <ai.rapids.refcount.debug>${ai.rapids.refcount.debug}</ai.rapids.refcount.debug>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-native-libs</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <overwrite>true</overwrite>
                            <skip>${skipNativeCopy}</skip>
                            <outputDirectory>${basedir}/target/native-deps/${os.arch}/${os.name}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${native.build.path}</directory>
                                    <includes>
                                        <include>libcudfjni.so</include>
                                    </includes>
                                </resource>
                                <resource>
                                    <!--Set by groovy script-->
                                    <directory>${native.cudf.path}</directory>
                                    <includes>
                                        <include>libcudf.so</include>
                                    </includes>
                                </resource>
                                <resource>
                                    <!--Set by groovy script-->
                                    <directory>${native.deps.path}</directory>
                                    <includes>
                                        <include>librmm.so</include>
                                        <include>libNVCategory.so</include>
                                        <include>libNVStrings.so</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
